#
# spec file for package fixed-vector
#
# Copyright (c) 2020 SUSE LLC
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via https://bugs.opensuse.org/
#


%global pkg_name fixed-vector
%bcond_with tests
Name:           %{pkg_name}
Version:        1.0.0.0
Release:        0
Summary:        Generic vectors with statically known size
License:        BSD-3-Clause
URL:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz
ExcludeArch:    %{ix86}
BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-deepseq-devel
BuildRequires:  ghc-primitive-devel
BuildRequires:  ghc-rpm-macros
%if %{with tests}
BuildRequires:  ghc-doctest-devel
BuildRequires:  ghc-filemanip-devel
%endif

%description
Generic library for vectors with statically known size. Implementation is based
on
<http://unlines.wordpress.com/2010/11/15/generics-for-small-fixed-size-vectors/>
Same functions could be used to work with both ADT based vector like

> data Vec3 a = a a a

Tuples are vectors too:

>>> sum (1,2,3) 6

Vectors which are represented internally by arrays are provided by library.
Both boxed and unboxed arrays are supported.

Library is structured as follows:

* Data.Vector.Fixed Generic API. It's suitable for both ADT-based vector like
Complex and array-based ones.

* Data.Vector.Fixed.Cont Continuation based vectors. Internally all functions
use them.

* Data.Vector.Fixed.Mutable Type classes for array-based implementation and API
for working with mutable state.

* Data.Vector.Fixed.Unboxed Unboxed vectors.

* Data.Vector.Fixed.Boxed Boxed vector which can hold elements of any type.

* Data.Vector.Fixed.Storable Unboxed vectors of Storable types.

* Data.Vector.Fixed.Primitive Unboxed vectors based on pritimive package.

%package -n ghc-%{name}
Summary:        Haskell %{name} library

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.

%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Requires:       ghc-%{name} = %{version}-%{release}
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.

%prep
%autosetup

%build
%ghc_lib_build

%install
%ghc_lib_install

%check
%cabal_test

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%license LICENSE
%doc ChangeLog.md

%files -n ghc-%{name} -f ghc-%{name}.files
%license LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%doc ChangeLog.md

%changelog
