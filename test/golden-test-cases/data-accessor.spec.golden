#
# spec file for package data-accessor
#
# Copyright (c) 2020 SUSE LLC
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via https://bugs.opensuse.org/
#


%global pkg_name data-accessor
Name:           %{pkg_name}
Version:        0.2.2.7
Release:        0
Summary:        Utilities for accessing and manipulating fields of records
License:        BSD-3-Clause
URL:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz
ExcludeArch:    %{ix86}
BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-array-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-transformers-devel

%description
In Haskell 98 the name of a record field is automatically also the name of a
function which gets the value of the according field. E.g. if we have

data Pair a b = Pair {first :: a, second :: b}

then

> first :: Pair a b -> a > second :: Pair a b -> b

However for setting or modifying a field value we need to use some syntactic
sugar, which is often clumsy.

modifyFirst :: (a -> a) -> (Pair a b -> Pair a b) modifyFirst f r@(Pair
{first=a}) = r{first = f a}

With this package you can define record field accessors which allow setting,
getting and modifying values easily. The package clearly demonstrates the power
of the functional approach: You can combine accessors of a record and
sub-records, to make the access look like the fields of the sub-record belong
to the main record.

Example:

> *Data.Accessor.Example> (first^:second^=10) (('b',7),"hallo") >
(('b',10),"hallo")

You can easily manipulate record fields in a 'Control.Monad.State.State' monad,
you can easily code 'Show' instances that use the Accessor syntax and you can
parse binary streams into records. See 'Data.Accessor.Example' for
demonstration of all features.

It would be great if in revised Haskell versions the names of record fields are
automatically 'Data.Accessor.Accessor's rather than plain 'get' functions.
For now, the package 'data-accessor-template' provides Template Haskell
functions for automated generation of 'Data.Acesssor.Accessor's. See also the
other 'data-accessor' packages that provide an Accessor interface to other data
types. The package 'enumset' provides accessors to bit-packed records.

For similar packages see 'lenses' and 'fclabel'. A related concept are editors
<http://conal.net/blog/posts/semantic-editor-combinators/>. Editors only
consist of a modify method (and 'modify' applied to a 'const' function is a
'set' function). This way, they can modify all function values of a function at
once, whereas an accessor can only change a single function value, say, it can
change 'f 0 = 1' to 'f 0 = 2'. This way, editors can even change the type of a
record or a function. An Arrow instance can be defined for editors, but for
accessors only a Category instance is possible ('(.)' method). The reason is
the 'arr' method of the 'Arrow' class, that conflicts with the two-way nature
(set and get) of accessors.

%package -n ghc-%{name}
Summary:        Haskell %{name} library

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.

%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Requires:       ghc-%{name} = %{version}-%{release}
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.

%prep
%autosetup

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%license LICENSE

%files -n ghc-%{name} -f ghc-%{name}.files
%license LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files

%changelog
